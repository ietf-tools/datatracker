.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "PYANG" "1" "2024-05-23" "pyang-2.6.1" "User Manual"
.hy
.SH NAME
.PP
pyang - validate and convert YANG modules to various formats
.SH SYNOPSIS
.PP
\f[B]pyang\f[R] [--verbose] [--canonical] [--strict] [--lint] [--ietf]
[--lax-quote-checks] [--lax-xpath-checks] [--features
\f[I]features\f[R]] [--exclude-features \f[I]features\f[R]]
[--max-status \f[I]maxstatus\f[R]] [--hello]
[--implicit-hello-deviations] [--check-update-from \f[I]oldfile\f[R]]
[-o \f[I]outfile\f[R]] [-t \f[I]transform\f[R]] [-f \f[I]format\f[R]]
[-p \f[I]path\f[R]] [-W \f[I]warning\f[R]] [-E \f[I]error\f[R]]
\f[I]file\f[R]\&...
.PP
\f[B]pyang\f[R] [--sid-list] --sid-generate-file {count |
\f[I]entry-point:size\f[R]} \f[I]yang-filename\f[R]
.PP
\f[B]pyang\f[R] [--sid-list] --sid-update-file \f[I]sid-filename\f[R]
\f[I]yang-filename\f[R] [--sid-extra-range count
\f[I]entry-point:size\f[R]]
.PP
\f[B]pyang\f[R] [--sid-list] --sid-check-file \f[I]sid-filename\f[R]
\f[I]yang-filename\f[R]
.PP
\f[B]pyang\f[R] -h | --help
.PP
\f[B]pyang\f[R] -v --version
.PP
One or more \f[I]file\f[R] parameters may be given on the command line.
They denote either YANG modules to be processed (in YANG or YIN syntax)
or, using the \f[B]--hello\f[R] switch, a server <hello> message
conforming to \f[B]RFC 6241\f[R] and \f[B]RFC 6020\f[R], which
completely defines the data model - supported YANG modules as well as
features and capabilities.
In the latter case, only one \f[I]file\f[R] parameter may be present.
.PP
If no files are given, \f[B]pyang\f[R] reads input from stdin, which
must be one module or a server <hello> message.
.SH DESCRIPTION
.PP
The \f[B]pyang\f[R] program is used to validate YANG modules (\f[B]RFC
6020\f[R] and \f[B]RFC 7950\f[R]).
It is also used to convert YANG modules into equivalent YIN modules.
From a valid module a hybrid DSDL schema (\f[B]RFC 6110\f[R]) can be
generated.
.PP
If no \f[I]format\f[R] is given, the specified modules are validated,
and the program exits with exit code 0 if all modules are valid.
.SH OPTIONS
.TP
\f[B]-h\f[R], \f[B]--help\f[R]
Print a short help text and exit.
.TP
\f[B]-v\f[R], \f[B]--version\f[R]
Print the version number and exit.
.TP
\f[B]-e\f[R], \f[B]--list-errors\f[R]
Print a listing of all error codes and messages pyang might generate,
and then exit.
.TP
\f[B]--print-error-code\f[R]
On errors, print the symbolic error code instead of the error message.
.TP
\f[B]--print-error-basename\f[R]
On errors, print only the base file name independent of its module path
location.
.TP
\f[B]-Werror\f[R]
Treat warnings as errors.
.TP
\f[B]-Wnone\f[R]
Do not print any warnings.
.TP
\f[B]-W\f[R] \f[I]errorcode\f[R]
Treat \f[I]errorcode\f[R] as a warning, even if \f[B]-Werror\f[R] is
given.
\f[I]errorcode\f[R] must be a warning or a minor error.
.RS
.PP
Use \f[B]--list-errors\f[R] to get a listing of all errors and warnings.
.PP
The following example treats all warnings except the warning for unused
imports as errors:
.IP
.nf
\f[C]
$ pyang --Werror -W UNUSED_IMPORT
\f[R]
.fi
.RE
.TP
\f[B]-E\f[R] \f[I]errorcode\f[R]
Treat the warning \f[I]errorcode\f[R] as an error.
.RS
.PP
Use \f[B]--list-errors\f[R] to get a listing of all errors and warnings.
.PP
The following example treats only the warning for unused import as an
error:
.IP
.nf
\f[C]
$ pyang --Werror -W UNUSED_IMPORT
\f[R]
.fi
.RE
.TP
\f[B]--ignore-error\f[R] \f[I]errorcode\f[R]
Ignore error \f[I]errorcode\f[R].
.RS
.PP
Use with care.
Plugins that dont expect to be invoked if there are errors present may
crash.
.PP
Use \f[B]--list-errors\f[R] to get a listing of all errors and warnings.
.PP
The following example ignores syntax errors in patterns:
.IP
.nf
\f[C]
$ pyang --ignore-error PATTERN_ERROR
\f[R]
.fi
.RE
.TP
\f[B]--msg-template\f[R] \f[I]msg-template\f[R]
Print out error message in defined \f[I]msg-template\f[R].
.RS
.PP
Template used to display error messages.
This is a python new-style format string used to format the message
information with keys file, line, code, type, and msg.
.PP
The following example create a msg template in defined pattern:
.IP
.nf
\f[C]
$ pyang --msg-template={file} || {line} || {type} || {level}
    || {code} || {msg}
\f[R]
.fi
.RE
.TP
\f[B]--ignore-errors\f[R]
Ignore all errors.
Use with care.
Plugins that dont expect to be invoked if there are errors present may
crash.
.TP
\f[B]--keep-comments\f[R]
This parameter has effect only if a plugin can handle comments.
.TP
\f[B]--canonical\f[R]
Validate the module(s) according to the canonical YANG order.
.TP
\f[B]--verify-revision-history\f[R]
Ensure that the revision history in the given module(s) is correct, by
checking that it can find the old revisions of the module(s) in the YANG
module search path.
.TP
\f[B]--strict\f[R]
Force strict YANG compliance.
Currently this checks that the deref() function is not used in XPath
expressions and leafrefs.
.TP
\f[B]--lint\f[R]
Validate the module(s) according to the generic YANG guideline as
specified in \f[B]RFC 8407\f[R].
In addition, it checks that the module is in canonical order.
.TP
\f[B]--ietf\f[R]
Validate the module(s) like \f[B]--lint\f[R], and in addition verifies
that the namespace and module name follow the IETF conventions, and that
the module has the correct license text and \f[B]RFC 2119\f[R] /
\f[B]RFC 8174\f[R] boilerplate text.
.TP
\f[B]--lax-quote-checks\f[R]
Lax checks of backslashes in double quoted strings in YANG version 1
modules.
\f[B]RFC 6020\f[R] does not clearly define how to handle backslahes
within double quoted strings, when the character after the backslash is
not one of the characters listed in Section 6.1.3 in \f[B]RFC 6020\f[R].
.RS
.PP
Earlier versions of pyang silently accepted such escape sequences, but
the current version treats this as an error, just like it is defined in
YANG 1.1 \f[B]RFC 7950\f[R].
Passing this flag to pyang makes pyang silently accept such escape
sequences.
.RE
.TP
\f[B]--lax-xpath-checks\f[R]
Lax checks of XPath expressions.
Specifically, do not generate an error if an XPath expression uses a
variable or an unknown function.
.TP
\f[B]-L\f[R] \f[B]--hello\f[R]
Interpret the input file or standard input as a server <hello> message.
In this case, no more than one \f[I]file\f[R] parameter may be given.
.TP
\f[B]--implicit-hello-deviations\f[R]
Attempt to parse all deviations from a supplied <hello> message.
Not all implementations provide deviations explicitly as modules.
This flag enables more logic to attempt to derive all deviations from
the message.
.TP
\f[B]--trim-yin\f[R]
In YIN input modules, remove leading and trailing whitespace from every
line in the arguments of the following statements: contact, description,
error-message, organization and reference.
This way, the XML-indented argument texts look tidy after translating
the module to the compact YANG syntax.
.TP
\f[B]--max-line-length\f[R] \f[I]maxlen\f[R]
Give a warning if any line is longer than \f[I]maxlen\f[R].
The value 0 means no check (default).
.TP
\f[B]--max-identifier-length\f[R] \f[I]maxlen\f[R]
Give a error if any identifier is longer than_maxlen_.
.TP
\f[B]-t\f[R] \f[B]--transform\f[R] \f[I]transform\f[R]
Transform the module(s) after parsing them but before outputting them.
Multiple transformations can be given, and will be performed in the
order that they were specified.
The supported transformations are listed in TRANSFORMATIONS below.
.TP
\f[B]-f\f[R] \f[B]--format\f[R] \f[I]format\f[R]
Convert the module(s) into \f[I]format\f[R].
Some translators require a single module, and some can translate
multiple modules at one time.
If no \f[I]outfile\f[R] file is specified, the result is printed on
stdout.
The supported formats are listed in OUTPUT FORMATS below.
.TP
\f[B]-o\f[R] \f[B]--output\f[R] \f[I]outfile\f[R]
Write the output to the file \f[I]outfile\f[R] instead of stdout.
.TP
\f[B]-F\f[R] \f[B]--features\f[R] \f[I]features\f[R]
\f[I]features\f[R] is a string of the form
\f[I]modulename\f[R]:[\f[I]feature\f[R](,\f[I]feature\f[R])*]
.RS
.PP
This option is used to prune the data model by removing all nodes that
are defined with a \[dq]if-feature\[dq] that is not listed as
\f[I]feature\f[R].
This option affects all output formats.
.PP
This option can be given multiple times, and may also be combined with
\f[B]--hello\f[R].
The \f[B]--features\f[R] option overrides any supported features for a
module that are taken from the hello file.
.PP
If this option is not given, nothing is pruned, i.e., it works as if all
features were explicitly listed.
.PP
The \f[B]--exclude-features\f[R] option can be used for excluding a list
of named features.
\f[B]--features\f[R] and \f[B]--exclude-features\f[R] cant both be
specified for a given module.
.PP
For example, to view the tree output for a module with all if-featured
nodes removed, do:
.IP
.nf
\f[C]
$ pyang -f tree --features mymod: mymod.yang
\f[R]
.fi
.RE
.TP
\f[B]-X\f[R] \f[B]--exclude-features\f[R] \f[I]features\f[R]
\f[I]features\f[R] is a string of the form
\f[I]modulename\f[R]:[\f[I]feature\f[R](,\f[I]feature\f[R])*]
.RS
.PP
This option is used to prune the data model by removing all nodes that
are defined with a \[dq]if-feature\[dq] that is listed as
\f[I]feature\f[R].
This option affects all output formats.
.PP
This option can be given multiple times.
It cant be combined with \f[B]--hello\f[R].
.PP
The \f[B]--features\f[R] option can be used for including all features
or a list of named features.
\f[B]--features\f[R] and \f[B]--exclude-features\f[R] cant both be
specified for a given module.
.PP
For example, to view the tree output for a module with if-featured nodes
for the specified feature removed, do:
.IP
.nf
\f[C]
$ pyang -f tree --exclude-features mymod:myfeat mymod.yang
\f[R]
.fi
.RE
.TP
\f[B]--max-status\f[R] \f[I]maxstatus\f[R]
\f[I]maxstatus\f[R] is one of:\f[I]current\f[R],\f[I]deprecated\f[R], or
\f[I]obsolete\f[R].
.RS
.PP
This option is used to prune the data model by removing all nodes that
are defined with a \[dq]status\[dq] that is less than the given
\f[I]maxstatus\f[R].
This option affects all output formats.
.RE
.TP
\f[B]--deviation-module\f[R] \f[I]file\f[R]
This option is used to apply the deviations defined in \f[I]file\f[R].
This option affects all output formats.
.RS
.PP
This option can be given multiple times.
.PP
For example, to view the tree output for a module with some deviations
applied, do:
.IP
.nf
\f[C]
$ pyang -f tree --deviation-module mymod-devs.yang mymod.yang
\f[R]
.fi
.RE
.TP
\f[B]-p\f[R] \f[B]--path\f[R] \f[I]path\f[R]
\f[I]path\f[R] is a colon (:) separated list of directories to search
for imported modules.
This option may be given multiple times.
.RS
.PP
By default, all directories (except \[dq].\[dq]) found in the path are
recursively scanned for modules.
This behavior can be disabled by giving the option
\f[B]--no-path-recurse\f[R].
.PP
The following directories are always added to the search path:
.IP "1." 3
current directory
.IP "2." 3
\f[B]$YANG_MODPATH\f[R]
.IP "3." 3
\f[B]$HOME\f[R]/yang/modules
.IP "4." 3
\f[B]\f[BI]Y\f[B]\f[BI]A\f[B]\f[BI]N\f[B]\f[BI]G\f[B]_\f[BI]I\f[B]\f[BI]N\f[B]\f[BI]S\f[B]\f[BI]T\f[B]\f[BI]A\f[B]\f[BI]L\f[B]\f[BI]L\f[B] *  * /\f[BI]y\f[B]\f[BI]a\f[B]\f[BI]n\f[B]\f[BI]g\f[B]/\f[BI]m\f[B]\f[BI]o\f[B]\f[BI]d\f[B]\f[BI]u\f[B]\f[BI]l\f[B]\f[BI]e\f[B]\f[BI]s\f[B]\f[BI]O\f[B]\f[BI]R\f[B]\f[BI]i\f[B]\f[BI]f\f[B] * *YANG_INSTALL\f[R]
is unset <the default installation directory>/yang/modules (on Unix
systems: /usr/share/yang/modules)
.RE
.TP
\f[B]--no-path-recurse\f[R]
If this parameter is given, directories in the search path are not
recursively scanned for modules.
.TP
\f[B]--plugindir\f[R] \f[I]plugindir\f[R]
Load all YANG plugins found in the directory \f[I]plugindir\f[R].
This option may be given multiple times.
.RS
.PP
List of directories to search for pyang plugins.
The following directories are always added to the search path:
.IP "1." 3
pyang/plugins from where pyang is installed
.IP "2." 3
\f[B]$PYANG_PLUGINPATH\f[R]
.RE
.TP
\f[B]--check-update-from\f[R] \f[I]oldfile\f[R]
Checks that a new revision of a module follows the update rules given in
\f[B]RFC 6020\f[R] and \f[B]RFC 7950\f[R].
\f[I]oldfile\f[R] is the old module and \f[I]file\f[R] is the new
version of the module.
.RS
.PP
If the old module imports or includes any modules or submodules, it is
important that the the old versions of these modules and submodules are
found.
By default, the directory where \f[I]oldfile\f[R] is found is used as
the only directory in the search path for old modules.
Use the option
.RE
.TP
\f[B]--check-update-from-path\f[R]
to control this path.
.TP
\f[B]-P\f[R] \f[B]--check-update-from-path\f[R] \f[I]oldpath\f[R]
\f[I]oldpath\f[R] is a colon (:) separated list of directories to search
for imported modules.
This option may be given multiple times.
.TP
\f[B]-D\f[R] \f[B]--check-update-from-deviation-module\f[R] \f[I]olddeviation\f[R]
\f[I]olddeviation\f[R] is an old deviation module of the old module
\f[I]oldfile\f[R].
This option may be given multiple times.
For example, to check updates of a module with some deviations applied,
do:
.RS
.IP
.nf
\f[C]
$ pyang --check-update-from-deviation-module oldmod-devs.yang \[rs]
    --check-update-from oldmod.yang \[rs]
    --deviation-module newmod-devs.yang newmod.yang
\f[R]
.fi
.RE
.TP
\f[I]file\&...\f[R]
These are the names of the files containing the modules to be validated,
or the module to be converted.
.SH TRANSFORMATIONS
.PP
Installed \f[B]pyang\f[R] transformations are (like output formats)
plugins and therefore may define their own options, or add new
transformations to the \f[B]-t\f[R] option.
These options and transformations are listed in \f[B]pyang -h\f[R].
.TP
\f[I]edit\f[R]
Modify the supplied module(s) in various ways.
This transform will usually be used with the \f[I]yang\f[R] output
format.
.SH EDIT TRANSFORM
.PP
The \f[I]edit\f[R] transform modifies the supplied module(s) in various
ways.
It can, for example, replace top-level \f[I]description\f[R] statements,
update \f[I]include\f[R] statements and manage \f[I]revision\f[R]
statements.
Unless otherwise noted below, it only modifies \f[I]existing\f[R]
statements.
.PP
Each \f[I]edit\f[R] transform string (non-date) option value is either a
plain string (which is taken literally) or a \f[I]+\f[R]-separated list
of directives (whose expansions are concatenated with double-linebreak
separators, i.e., each directive results in one or more paragraphs).
.PP
Each directive is either of the form \f[I]\[at]filename\f[R] (which is
replaced with the contents of the file; there is no search path;
trailing whitespace is discarded) or of the form \f[I]%keyword\f[R].
Any unrecognized directives are treated as plain strings.
The following \f[I]%\f[R]-directives are currently supported:
.IP \[bu] 2
\f[I]%SUMMARY\f[R] : This expands to a \[dq]summary\[dq] of the original
argument value.
It\[cq]s intended for use with top-level \f[I]description\f[R]
statements that typically consist of a hand-crafted summary followed by
copyrights, license and other boiler-plate text.
The summary is the text up to but not including the first line that
(ignoring leading and trailing whitespace) starts with the word
\f[I]Copyright\f[R] followed by a space.
.IP \[bu] 2
\f[I]%SUBST/old/new\f[R] : This expands to the original argument value
with all instances of \f[I]old\f[R] replaced with \f[I]new\f[R].
There is no provision for replacing characters that contain forward
slashes, and there is no terminating slash.
.IP \[bu] 2
\f[I]%DELETE\f[R] : This clears the output buffer and suppresses a check
that would normally prevent overwriting an existing value (unless that
value is the literal string \f[B]TBD\f[R]).
.PP
In the examples given below, it\[cq]s assumed that there are
\f[I]CONTACT\f[R], \f[I]CONTEXT\f[R], \f[I]LICENSE\f[R],
\f[I]ORGANIZATION\f[R], \f[I]REFERENCE\f[R] and \f[I]REVISION\f[R] files
in a top-level project directory (which in this case is the parent of
the directory in which \f[B]pyang\f[R] is being run).
These examples illustrate how the \f[I]edit\f[R] transform might be used
with the \f[I]yang\f[R] output format to prepare YANG files for
publication.
.PP
Edit transform specific options:
.TP
\f[B]--edit-yang-version\f[R] \f[I]version\f[R]
Set the YANG version (i.e., the \f[I]yang-version\f[R] statement\[cq]s
argument) to \f[I]version\f[R].
This does nothing if the YANG module doesn\[cq]t already have a
\f[I]yang-version\f[R] statement.
.RS
.PP
Example: \f[B]--edit-yang-version 1.1\f[R].
.RE
.TP
\f[B]--edit-namespace\f[R] \f[I]namespace\f[R]
Set the YANG namespace (i.e., the \f[I]namespace\f[R] statement\[cq]s
argument) to \f[I]namespace\f[R].
This does nothing if the YANG module doesn\[cq]t already have a
\f[I]namespace\f[R] statement.
.RS
.PP
Example: \f[B]--edit-namespace %SUBST/acme-pacific-org/apo\f[R]
.RE
.TP
\f[B]--edit-update-import-dates\f[R]
Update any \f[I]import\f[R] (or \f[I]include\f[R])
\f[I]revision-date\f[R] statements to match imported (or included)
modules and submodules.
If there isn\[cq]t already a \f[I]revision-date\f[R] statement, it will
be added.
.TP
\f[B]--edit-delete-import-dates\f[R]
Delete any \f[I]import\f[R] (or \f[I]include\f[R])
\f[I]revision-date\f[R] statements.
.TP
\f[B]--edit-organization\f[R] \f[I]organization\f[R]
Set the organization (i.e., the \f[I]organization\f[R] statement\[cq]s
argument) to \f[I]organization\f[R].
This does nothing if the YANG module doesn\[cq]t already have an
\f[I]organization\f[R] statement.
.RS
.PP
Example: \f[B]--edit-organization \[at]../ORGANIZATION\f[R]
.RE
.TP
\f[B]--edit-contact\f[R] \f[I]contact\f[R]
Set the contact info (i.e., the \f[I]contact\f[R] statement\[cq]s
argument) to \f[I]contact\f[R].
This does nothing if the YANG module doesn\[cq]t already have a
\f[I]contact\f[R] statement.
.RS
.PP
Example: \f[B]--edit-contact \[at]../CONTACT\f[R]
.RE
.TP
\f[B]--edit-description\f[R] \f[I]description\f[R]
Set the top-level description (i.e., the top-level \f[I]description\f[R]
statement\[cq]s argument) to \f[I]description\f[R].
This does nothing if the YANG module doesn\[cq]t already have a
\f[I]description\f[R] statement.
.RS
.PP
Example: \f[B]--edit-description
%SUMMARY+\[at]../LICENSE+\[at]../CONTEXT\f[R]
.RE
.TP
\f[B]--edit-delete-revisions-after\f[R] \f[I]prevdate\f[R]
Delete any \f[I]revision\f[R] statements after (i.e., that are more
recent than) the supplied \f[I]yyyy-mm-dd\f[R] revision date.
A typical use case is to supply the date of the previous release: any
revisions since then will be internal (e.g., developers often feel that
they should add revision statements for git commits) and are not wanted
in the next released version.
.RS
.PP
Example: \f[B]--edit-delete-revisions-after 2019-03-15\f[R]
.RE
.TP
\f[B]--edit-revision-date\f[R] \f[I]date\f[R]
Set the most recent revision date to the supplied \f[I]yyyy-mm-dd\f[R]
revision date.
This does nothing if the YANG module doesn\[cq]t already have at least
one \f[I]revision\f[R] statement.
If necessary, a new \f[I]revision\f[R] statement will be inserted before
any (remaining) existing revisions.
.RS
.PP
Example: \f[B]--edit-revision-date 2020-03-15\f[R]
.RE
.TP
\f[B]--edit-revision-description\f[R] \f[I]description\f[R]
Set the most recent revision description to \f[I]description\f[R].
.RS
.PP
Example: \f[B]--edit-revision-description=%DELETE+\[at]../REVISION\f[R]
.RE
.TP
\f[B]--edit-revision-reference\f[R] \f[I]reference\f[R]
Set the most recent revision reference to \f[I]reference\f[R].
.RS
.PP
Example: \f[B]--edit-revision-reference=%DELETE+\[at]../REFERENCE\f[R]
.RE
.SH OUTPUT FORMATS
.PP
Installed \f[B]pyang\f[R] plugins may define their own options, or add
new formats to the \f[B]-f\f[R] option.
These options and formats are listed in \f[B]pyang -h\f[R].
.TP
\f[I]capability\f[R]
Capability URIs for each module of the data model.
.TP
\f[I]depend\f[R]
Makefile dependency rule for the module.
.TP
\f[I]dsdl\f[R]
Hybrid DSDL schema, see \f[B]RFC 6110\f[R].
.TP
\f[I]identifiers\f[R]
All identifiers in the module.
.TP
\f[I]jsonxsl\f[R]
XSLT stylesheet for transforming XML instance documents to JSON.
.TP
\f[I]jstree\f[R]
HTML/JavaScript tree navigator.
.TP
\f[I]jtox\f[R]
Driver file for transforming JSON instance documents to XML.
.TP
\f[I]name\f[R]
Module name, and the name of the main module for a submodule.
.TP
\f[I]omni\f[R]
An applescript file that draws a diagram in \f[B]OmniGraffle\f[R].
.TP
\f[I]sample-xml-skeleton\f[R]
Skeleton of a sample XML instance document.
.TP
\f[I]tree\f[R]
Tree structure of the module.
.TP
\f[I]flatten\f[R]
Print the schema nodes in CSV form.
.TP
\f[I]uml\f[R]
UML file that can be read by \f[B]plantuml\f[R] to generate UML
diagrams.
.TP
\f[I]yang\f[R]
Normal YANG syntax.
.TP
\f[I]yin\f[R]
The XML syntax of YANG.
.SH LINT CHECKER
.PP
The \f[I]lint\f[R] option validates that the module follows the generic
conventions and rules given in \f[B]RFC 8407\f[R].
In addition, it checks that the module is in canonical order.
.PP
Options for the \f[I]lint\f[R] checker:
.TP
\f[B]--lint-namespace-prefix\f[R] \f[I]prefix\f[R]
Validate that the module\[cq]s namespace is of the form:
\[dq]<prefix><modulename>\[dq].
.TP
\f[B]--lint-modulename-prefix\f[R] \f[I]prefix\f[R]
Validate that the module\[cq]s name starts with \f[I]prefix\f[R].
.TP
\f[B]--lint-ensure-hyphenated-names\f[R]
Validate that all identifiers use hyphenated style, i.e., no uppercase
letters or underscores.
.SH YANG SCHEMA ITEM IDENTIFIERS (SID)
.PP
YANG Schema Item iDentifiers (SID) are globally unique unsigned integers
used to identify YANG items.
SIDs are used instead of names to save space in constrained applications
such as COREconf.
This plugin is used to automatically generate and updated .sid files
used to persist and distribute SID assignments.
.PP
Options for generating, updating and checking .sid files:
.TP
\f[B]--sid-generate-file\f[R]
This option is used to generate a new .sid file from a YANG module.
.RS
.PP
Two arguments are required to generate a .sid file; the SID range
assigned to the YANG module and its definition file.
The SID range specified is a sub-range within a range obtained from a
registrar or a sub-range within the experimental range (i.e., 60000 to
99999).
The SID range consists of the first SID of the range, followed by a
colon, followed by the number of SID allocated to the YANG module.
The filename consists of the module name, followed by an \[at] symbol,
followed by the module revision, followed by the \[dq].yang\[dq]
extension.
.PP
This example shows how to generate the file
\f[I]toaster\[at]2009-11-20.sid\f[R].
.IP
.nf
\f[C]
$ pyang --sid-generate-file 20000:100 toaster\[at]2009-11-20.yang
\f[R]
.fi
.RE
.TP
\f[B]--sid-update-file\f[R]
Each time new items are added to a YANG module by the introduction of a
new revision of this module, its included sub-modules or imported
modules, the associated .sid file need to be updated.
This is done by using the \f[B]--sid-update-file\f[R] option.
.RS
.PP
Two arguments are required to generate a .sid file for an updated YANG
module; the previous .sid file generated for the YANG module and the
definition file of the updated module.
Both filenames follow the usual naming conversion consisting of the
module name, followed by an \[at] symbol, followed by the module
revision, followed by the extension.
.PP
This example shows how to generate the file
\f[I]toaster\[at]2009-12-28.sid\f[R] based on the SIDs already present
in \f[I]toaster\[at]2009-11-20.sid\f[R].
.IP
.nf
\f[C]
$ pyang --sid-update-file toaster\[at]2009-11-20.sid \[rs]
    toaster\[at]2009-12-28.yang
\f[R]
.fi
.RE
.TP
\f[B]--sid-check-file\f[R]
The \f[B]--sid-check-file\f[R] option can be used at any time to verify
if a .sid file need to be updated.
.RS
.PP
Two arguments are required to verify a .sid file; the filename of the
\&.sid file to be checked and the corresponding definition file.
.PP
For example:
.IP
.nf
\f[C]
$ pyang --sid-check-file toaster\[at]2009-12-28.sid \[rs]
    toaster\[at]2009-12-28.yang
\f[R]
.fi
.RE
.TP
\f[B]--sid-list\f[R]
The \f[B]--sid-list\f[R] option can be used before any of the previous
options to obtains the list of SIDs assigned or validated.
For example:
.RS
.IP
.nf
\f[C]
$ pyang --sid-list --sid-generate-file 20000:100 \[rs]
    toaster\[at]2009-11-20.yang
\f[R]
.fi
.RE
.TP
\f[B]--sid-extra-range\f[R]
If needed, an extra SID range can be assigned to an existing YANG module
during its update with the \f[B]--sid-extra-range\f[R] option.
.RS
.PP
For example, this command generates the file
\f[I]toaster\[at]2009-12-28.sid\f[R] using the initial range(s) present
in \f[I]toaster\[at]2009-11-20.sid\f[R] and the extra range specified in
the command line.
.IP
.nf
\f[C]
$ pyang --sid-update-file toaster\[at]2009-11-20.sid \[rs]
    toaster\[at]2009-12-28.yang --sid-extra-range 20100:100
\f[R]
.fi
.RE
.TP
\f[I]count\f[R]
The number of SID required when generating or updating a .sid file can
be computed by specifying \[dq]\f[I]count\f[R]\[dq] as SID range.
.RS
.PP
For example:
.IP
.nf
\f[C]
$ pyang --sid-generate-file count \[rs]
    toaster\[at]2009-11-20.yang
\f[R]
.fi
.PP
or:
.IP
.nf
\f[C]
$ pyang --sid-update-file toaster\[at]2009-11-20.sid \[rs]
    toaster\[at]2009-12-28.yang --sid-extra-range count
\f[R]
.fi
.RE
.SH CAPABILITY OUTPUT>
.PP
The \f[I]capability\f[R] output prints a capability URL for each module
of the input data model, taking into account features and deviations, as
described in section 5.6.4 of \f[B]RFC 6020\f[R].
.PP
Options for the \f[I]capability\f[R] output format:
.TP
\f[B]--capability-entity\f[R]
Write ampersands in the output as XML entities (\[dq]&amp;\[dq]).
.SH DEPEND OUTPUT
.PP
The \f[I]depend\f[R] output generates a Makefile dependency rule for
files based on a YANG module.
This is useful if files are generated from the module.
For example, suppose a .c file is generated from each YANG module.
If the YANG module imports other modules, or includes submodules, the .c
file needs to be regenerated if any of the imported or included modules
change.
Such a dependency rule can be generated like this:
.IP
.nf
\f[C]
$ pyang -f depend --depend-target mymod.c \[rs]
    --depend-extension .yang mymod.yang
mymod.c : ietf-yang-types.yang my-types.yang
\f[R]
.fi
.PP
Options for the \f[I]depend\f[R] output format:
.TP
\f[B]--depend-target\f[R]
Makefile rule target.
Default is the module name.
.TP
\f[B]--depend-extension\f[R]
YANG module file name extension.
Default is no extension.
.TP
\f[B]--depend-no-submodules\f[R]
Do not generate dependencies for included submodules.
.TP
\f[B]--depend-from-submodules\f[R]
Generate dependencies taken from all included submodules.
.TP
\f[B]--depend-recurse\f[R]
Recurse into imported modules and generate dependencies for their
imported modules etc.
.TP
\f[B]--depend-include-path\f[R]
Include file path in the prerequisites.
Note that if no \f[B]--depend-extension\f[R] has been given, the
prerequisite is the filename as found, i.e., ending in \[dq].yang\[dq]
or \[dq].yin\[dq].
.TP
\f[B]--depend-ignore-module\f[R]
Name of YANG module or submodule to ignore in the prerequisites.
This option can be given multiple times.
.SH DSDL Output
.PP
The \f[I]dsdl\f[R] output takes a data model consisting of one or more
YANG modules and generates a hybrid DSDL schema as described in \f[B]RFC
6110\f[R].
The hybrid schema is primarily intended as an interim product used by
\f[B]yang2dsdl\f[R](1).
.PP
The \f[I]dsdl\f[R] plugin also supports metadata annotations, if they
are defined and used as described in \f[B]RFC 7952\f[R].
.PP
Options for the \f[I]dsdl\f[R] output format:
.TP
\f[B]--dsdl-no-documentation\f[R]
Do not print Dublin Core metadata terms
.TP
\f[B]--dsdl-record-defs\f[R]
Record translations of all top-level typedefs and groupings in the
output schema, even if they are not used.
This is useful for translating library modules.
.SH JSONXSL OUTPUT
.PP
The \f[I]jsonxsl\f[R] output generates an XSLT 1.0 stylesheet that can
be used for transforming an XML instance document into JSON text as
specified in \f[B]RFC 7951\f[R].
The XML document must be a valid instance of the data model which is
specified as one or more input YANG modules on the command line (or via
a <hello> message, see the \f[B]--hello\f[R] option).
.PP
The \f[I]jsonxsl\f[R] plugin also converts metadata annotations, if they
are defined and used as described in \f[B]RFC 7952\f[R].
.PP
The data tree(s) must be wrapped at least in either <nc:data> or
<nc:config> element, where \[dq]nc\[dq] is the namespace prefix for the
standard NETCONF URI \[dq]urn:ietf:params:xml:ns:netconf:base:1.0\[dq],
or the XML instance document has to be a complete NETCONF RPC
request/reply or notification.
Translation of RPCs and notifications defined by the data model is also
supported.
.PP
The generated stylesheet accepts the following parameters that modify
its behaviour:
.IP \[bu] 2
\f[I]compact\f[R]: setting this parameter to 1 results in a compact
representation of the JSON text, i.e., without any whitespace.
The default is 0 which means that the JSON output is pretty-printed.
.IP \[bu] 2
\f[I]ind-step\f[R]: indentation step, i.e., the number of spaces to use
for each level.
The default value is 2 spaces.
Note that this setting is only useful for pretty-printed output
(compact=0).
.PP
The stylesheet also includes the file \f[I]jsonxsl-templates.xsl\f[R]
which is a part of \f[B]pyang\f[R] distribution.
.SH JSTREE OUTPUT
.PP
The \f[I]jstree\f[R] output grenerates an HTML/JavaScript page that
presents a tree-navigator to the given YANG module(s).
.PP
jstree output specific option:
.TP
\f[B]--jstree-no-path\f[R]
Do not include paths in the output.
This option makes the page less wide.
.SH JTOX OUTPUT
.PP
The \f[I]jtox\f[R] output generates a driver file which can be used as
one of the inputs to \f[B]json2xml\f[R] for transforming a JSON document
to XML as specified in \f[B]RFC 7951\f[R].
.PP
The \f[I]jtox\f[R] output itself is a JSON document containing a concise
representation of the data model which is specified as one or more input
YANG modules on the command line (or via a <hello> message, see the
\f[B]--hello\f[R] option).
.PP
See \f[B]json2xml\f[R] manual page for more information.
.SH OMNI OUTPUT
.PP
The plugin generates an applescript file that draws a diagram in
OmniGraffle.
Requires OmniGraffle 6.
Usage:
.IP
.nf
\f[C]
 $ pyang -f omni foo.yang -o foo.scpt
 $ osascript foo.scpt
\f[R]
.fi
.PP
omni output specific option:
.TP
\f[B]--omni-path\f[R] \f[I]path\f[R]
Subtree to print.
The \f[I]path\f[R] is a slash (\[dq]/\[dq]) separated path to a subtree
to print.
For example \[dq]/nacm/groups\[dq].
.SH NAME OUTPUT
.PP
The \f[I]name\f[R] output prints the name of each module in the input
data model.
For submodules, it also shows the name of the main module to which the
submodule belongs.
.PP
name output specific option:
.TP
\f[B]--name-print-revision\f[R]
Print the name and revision in name\[at]revision format.
.SH SAMPLE-XML-SKELETON OUTPUT
.PP
The \f[I]sample-xml-skeleton\f[R] output generates an XML instance
document with sample elements for all nodes in the data model, according
to the following rules:
.IP \[bu] 2
An element is present for every leaf, container or anyxml.
.IP \[bu] 2
At least one element is present for every leaf-list or list.
The number of entries in the sample is min(1,
.IP \[bu] 2
For a choice node, sample element(s) are present for each case.
.IP \[bu] 2
Leaf, leaf-list and anyxml elements are empty (but see the
\f[B]--sample-xml-skeleton-defaults\f[R] option below).
.PP
Note that the output document will most likely be invalid and needs
manual editing.
.PP
Options specific to the \f[I]sample-xml-skeleton\f[R] output format:
.TP
\f[B]--sample-xml-skeleton-annotations\f[R]
Add XML comments to the sample documents with hints about expected
contents, for example types of leaf nodes, permitted number of list
entries etc.
.TP
\f[B]--sample-xml-skeleton-defaults\f[R]
Add leaf elements with defined defaults to the output with their default
value.
Without this option, the default elements are omitted.
.TP
\f[B]--sample-xml-skeleton-doctype=\f[R]_type_
Type of the sample XML document.
Supported values for \f[I]type\f[R] are \f[B]data\f[R] (default) and
\f[B]config\f[R].
This option determines the document element of the output XML document
(<data> or <config> in the NETCONF namespace) and also affects the
contents: for \f[B]config\f[R], only data nodes representing
configuration are included.
.TP
\f[B]--sample-xml-skeleton-path=\f[R]_path_
Subtree of the sample XML document to generate, including all ancestor
elements.
The \f[I]path\f[R] is a slash (\[dq]/\[dq]) separated list of data node
names that specifies the path to a subtree to print.
For example \[dq]/nacm/rule-list/rule/rpc-name\[dq].
.SH TREE OUTPUT
.PP
The \f[I]tree\f[R] output prints the resulting schema tree from one or
more modules.
Use \f[B]pyang --tree-help\f[R] to print a description on the symbols
used by this format.
.PP
Tree output specific options:
.TP
\f[B]--tree-help\f[R]
Print help on symbols used in the tree output and exit.
.TP
\f[B]--tree-depth\f[R] \f[I]depth\f[R]
Levels of the tree to print.
.TP
\f[B]--tree-path\f[R] \f[I]path\f[R]
Subtree to print.
The \f[I]path\f[R] is a slash (\[dq]/\[dq]) separated path to a subtree
to print.
For example \[dq]/nacm/groups\[dq].
All ancestors and the selected subtree are printed.
.TP
\f[B]--tree-print-groupings\f[R]
Print the top-level groupings defined in the module.
.TP
\f[B]--tree-print-structures\f[R]
Print the ietf-yang-structure-ext:structure structures defined in the
module.
.TP
\f[B]--tree-print-yang-data\f[R]
Print the ietf-restconf:yang-data structures defined in the module.
.TP
\f[B]--tree-line-length\f[R] \f[I]maxlen\f[R]
Try to break lines so they are no longer than \f[I]maxlen\f[R].
This is a best effort algorithm.
.TP
\f[B]--tree-module-name-prefix\f[R] \f[I]maxlen\f[R]
Use the module name (instead of the prefix) to prefix parameters and
types.
.SH FLATTEN OUTPUT
.PP
The \f[I]flatten\f[R] output flattens provided YANG module and outputs
the schema nodes and some of their properties in CSV format.
.PP
Flatten output specific options:
.TP
\f[B]--flatten-no-header\f[R]
Do not emit the CSV header.
.TP
\f[B]--flatten-keyword\f[R]
Output the keyword.
This will resolve as container, leaf, etc.
.TP
\f[B]--flatten-type\f[R]
Output the top-level type.
This will resolve to a module-prefixed type.
.TP
\f[B]--flatten-primitive-type\f[R]
Output the primitive type.
This resolves to a YANG type such as uint64.
.TP
\f[B]--flatten-flag\f[R]
Output flag property.
Derives a flag - for instance rw/ro for config, or x for RPC.
.TP
\f[B]--flatten-description\f[R]
Output the description.
.TP
\f[B]--flatten-keys\f[R]
Output whether the XPath is identified as a key.
\f[I]key\f[R] or null will be output per XPath.
.TP
\f[B]--flatten-keys-in-xpath\f[R]
Output the XPath with keys in path.
.TP
\f[B]--flatten-prefix-in-xpath\f[R]
Output the XPath with prefixes instead of modules.
.TP
\f[B]--flatten-qualified-in-xpath\f[R]
Output the qualified XPath i.e.,
/module1:root/module1:node/module2:node/\&...
.TP
\f[B]--flatten-qualified-module-and-prefix-path\f[R]
Output an XPath with both module and prefix i.e.,
/module1:prefix1:root/\&...
This is NOT a colloquial syntax of XPath.
Emitted separately.
.TP
\f[B]--flatten-deviated\f[R]
Flatten all data keywords instead of only data definition keywords.
.TP
\f[B]--flatten-filter-keyword\f[R] \f[I]keyword\f[R]
Filter output to only desired keywords.
Keywords specified are what will be displayed in output.
Can be specified more than once.
.TP
\f[B]--flatten-filter-primitive\f[R] \f[I]primitive_type\f[R]
Filter output to only desired primitive types.
Primitives specified are what will be displayed in output.
Can be specified more than once.
.TP
\f[B]--flatten-filter-flag\f[R] \f[I]choice\f[R]
Filter output to flag.
.RS
.IP \[bu] 2
\f[I]rw\f[R] for configuration data.
.IP \[bu] 2
\f[I]ro\f[R] for non-configuration data, output parameters to rpcs and
actions, and notification parameters.
.IP \[bu] 2
\f[I]w\f[R] for input parameters to rpcs and actions.
.IP \[bu] 2
\f[I]u\f[R] for uses of a grouping.
.IP \[bu] 2
\f[I]x\f[R] for rpcs and actions.
.IP \[bu] 2
\f[I]n\f[R] for notifications.
.RE
.TP
\f[B]--flatten-csv-dialect\f[R] \f[I]dialect\f[R]
CSV dialect for output.
\f[I]dialect\f[R] is one of \f[B]excel\f[R], \f[B]excel-tab\f[R], or
\f[B]unix\f[R].
.TP
\f[B]--flatten-ignore-no-primitive\f[R]
Ignore error if primitive is missing.
.TP
\f[B]--flatten-status\f[R]
Output the status statement value.
.TP
\f[B]--flatten-resolve-leafref\f[R]
Output the XPath of the leafref target.
.SH UML OUTPUT
.PP
The \f[I]uml\f[R] output prints an output that can be used as input-file
to \f[B]plantuml\f[R] (http://plantuml.sourceforge.net) in order to
generate a UML diagram.
Note that it requires \f[B]graphviz\f[R] (http://www.graphviz.org/).
.PP
For large diagrams you may need to increase the Java heap-size by the
-XmxSIZEm option, to java.
For example: \f[B]java -Xmx1024m -jar plantuml.jar \&....\f[R]
.PP
Options for the \f[I]UML\f[R] output format:
.TP
\f[B]--uml-classes-only\f[R]
Generate UML with classes only, no attributes
.TP
\f[B]--uml-split-pages=\f[R]_layout_
Generate UML output split into pages, NxN, example 2x2.
One .png file per page will be rendered.
.TP
\f[B]--uml-output-directory=\f[R]_directory_
Put the generated .png files(s) in the specified output directory.
Default is \[dq]img/\[dq]
.TP
\f[B]--uml-title=\f[R]_title_
Set the title of the generated UML diagram, (default is YANG module
name).
.TP
\f[B]--uml-header=\f[R]_header_
Set the header of the generated UML diagram.
.TP
\f[B]--uml-footer=\f[R]_footer_
Set the footer of the generated UML diagram.
.TP
\f[B]--uml-long-identifers\f[R]
Use complete YANG schema identifiers for UML class names.
.TP
\f[B]--uml-no=\f[R]_arglist_
Render the diagram with groupings inlined.
.TP
\f[B]--uml-inline-augments\f[R]
Render the diagram with augments inlined.
.TP
\f[B]--uml-max-enums=\f[BI]number\f[B]\f[R]
Maximum of enum items rendered.
.TP
\f[B]--uml-filter-file=\f[BI]file\f[B]\f[R]
NOT IMPLEMENTED: Only paths in the filter file will be included in the
diagram.
A default filter file is generated by option --filter.
.SH YANG OUTPUT
.PP
Options for the \f[I]yang\f[R] output format:
.TP
\f[B]--yang-canonical\f[R]
Generate all statements in the canonical order.
.TP
\f[B]--yang-remove-unused-imports\f[R]
Remove unused import statements from the output.
.TP
\f[B]--yang-remove-comments\f[R]
Remove all comments from the output.
.TP
\f[B]--yang-line-length\f[R] \f[I]len\f[R]
Try to format each line with a maximum line length of \f[I]len\f[R].
Does not reformat long lines within strings.
.SH YIN OUTPUT
.PP
Options for the \f[I]yin\f[R] output format:
.TP
\f[B]--yin-canonical\f[R]
Generate all statements in the canonical order.
.TP
\f[B]--yin-pretty-strings\f[R]
Pretty print strings, i.e., print with extra whitespace in the string.
This is not strictly correct, since the whitespace is significant within
the strings in XML, but the output is more readable.
.SH YANG XPATH EXTENSIONS
.PP
This section describes XPath functions that can be used in
\[dq]must\[dq], \[dq]when\[dq], or \[dq]path\[dq] expressions in YANG
modules, in addition to the core XPath 1.0 functions.
.PP
\f[B]pyang\f[R] can be instructed to reject the usage of these functions
with the parameter \f[B]--strict\f[R].
.TP
\f[B]Function:\f[R] \f[I]node-set\f[R] \f[B]deref\f[R](\f[I]node-set\f[R])
The \f[B]deref\f[R] function follows the reference defined by the first
node in document order in the argument node-set, and returns the nodes
it refers to.
.RS
.PP
If the first argument node is an \f[B]instance-identifier\f[R], the
function returns a node-set that contains the single node that the
instance identifier refers to, if it exists.
If no such node exists, an empty node-set is returned.
.PP
If the first argument node is a \f[B]leafref\f[R], the function returns
a node-set that contains the nodes that the leafref refers to.
.PP
If the first argument node is of any other type, an empty node-set is
returned.
.PP
The following example shows how a leafref can be written with and
without the \f[B]deref\f[R] function:
.IP
.nf
\f[C]
/* without deref */

leaf my-ip {
  type leafref {
    path \[dq]/server/ip\[dq];
  }
}
leaf my-port {
  type leafref {
    path \[dq]/server[ip = current()/../my-ip]/port\[dq];
  }
}

/* with deref */

leaf my-ip {
  type leafref {
    path \[dq]/server/ip\[dq];
  }
}
leaf my-port {
  type leafref {
    path \[dq]deref(../my-ip)/../port\[dq];
  }
}
\f[R]
.fi
.RE
.SH EXAMPLES
.PP
The following example validates the standard YANG modules with derived
types:
.IP
.nf
\f[C]
$ pyang ietf-yang-types.yang ietf-inet-types.yang
\f[R]
.fi
.PP
The following example converts the ietf-yang-types module into YIN:
.IP
.nf
\f[C]
$ pyang -f yin -o ietf-yang-types.yin ietf-yang-types.yang
\f[R]
.fi
.PP
The following example converts the ietf-netconf-monitoring module into a
UML diagram:
.IP
.nf
\f[C]
$ pyang -f uml ietf-netconf-monitoring.yang > \[rs]
    ietf-netconf-monitoring.uml
$ java -jar plantuml.jar ietf-netconf-monitoring.uml
$ open img/ietf-netconf-monitoring.png
\f[R]
.fi
.SH ENVIRONMENT VARIABLES
.PP
\f[B]pyang\f[R] searches for referred modules in the colon (:) separated
path defined by the environment variable \f[B]$YANG_MODPATH\f[R] and in
the directory \f[B]$YANG_INSTALL\f[R]/yang/modules.
.PP
\f[B]pyang\f[R] searches for plugins in the colon (:) separated path
defined by the environment variable \f[B]$PYANG_PLUGINDIR\f[R].
.SH BUGS
.PP
The XPath arguments for the \f[I]must\f[R] and \f[I]when\f[R] statements
are checked only for basic syntax errors.
.SH AUTHORS
.PP
See the file CONTRIBUTORS at https://github.com/mbj4668/pyang.
