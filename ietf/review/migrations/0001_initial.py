# Generated by Django 2.2.28 on 2023-03-20 19:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ietf.review.models
import ietf.utils.models
import ietf.utils.timezone
import ietf.utils.validators
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("name", "0001_initial"),
        ("person", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("group", "0001_initial"),
        ("doc", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="UnavailablePeriod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=ietf.utils.timezone.date_today,
                        help_text="Choose the start date so that you can still do a review if it's assigned just before the start date - this usually means you should mark yourself unavailable for assignment some time before you are actually away. The default is today.",
                        null=True,
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Leaving the end date blank means that the period continues indefinitely. You can end it later.",
                        null=True,
                    ),
                ),
                (
                    "availability",
                    models.CharField(
                        choices=[
                            ("canfinish", "Can do follow-ups"),
                            ("unavailable", "Completely unavailable"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Provide (for the secretary's benefit) the reason why the review is unavailable",
                        max_length=2048,
                        verbose_name="Reason why reviewer is unavailable (Optional)",
                    ),
                ),
                (
                    "person",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="person.Person"
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group.Group",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewWish",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "doc",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="doc.Document"
                    ),
                ),
                (
                    "person",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="person.Person"
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group.Group",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "review wishes",
            },
        ),
        migrations.CreateModel(
            name="ReviewTeamSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "autosuggest",
                    models.BooleanField(
                        default=True,
                        verbose_name="Automatically suggest possible review requests",
                    ),
                ),
                (
                    "secr_mail_alias",
                    models.CharField(
                        blank=True,
                        help_text="Email alias for all of the review team secretaries",
                        max_length=255,
                        verbose_name="Email alias for all of the review team secretaries",
                    ),
                ),
                (
                    "remind_days_unconfirmed_assignments",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="To send a periodic email reminder to reviewers of review assignments they have neither accepted nor rejected, enter the number of days between these reminders. Clear the field if you don't want these reminders to be sent.",
                        null=True,
                        verbose_name="Periodic reminder of not yet accepted or rejected review assignments to reviewer every X days",
                    ),
                ),
                (
                    "group",
                    ietf.utils.models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="group.Group"
                    ),
                ),
                (
                    "notify_ad_when",
                    models.ManyToManyField(
                        blank=True,
                        related_name="reviewteamsettings_notify_ad_set",
                        to="name.ReviewResultName",
                    ),
                ),
                (
                    "review_results",
                    models.ManyToManyField(
                        default=ietf.review.models.get_default_review_results,
                        related_name="reviewteamsettings_review_results_set",
                        to="name.ReviewResultName",
                    ),
                ),
                (
                    "review_types",
                    models.ManyToManyField(
                        default=ietf.review.models.get_default_review_types,
                        to="name.ReviewTypeName",
                    ),
                ),
                (
                    "reviewer_queue_policy",
                    models.ForeignKey(
                        default="RotateAlphabetically",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="name.ReviewerQueuePolicyName",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review team settings",
                "verbose_name_plural": "Review team settings",
            },
        ),
        migrations.CreateModel(
            name="ReviewSecretarySettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "remind_days_before_deadline",
                    models.IntegerField(
                        blank=True,
                        help_text="To get an email reminder in case a reviewer forgets to do an assigned review, enter the number of days before review deadline you want to receive it. Clear the field if you don't want a reminder.",
                        null=True,
                    ),
                ),
                (
                    "max_items_to_show_in_reviewer_list",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum number of completed items to show for one reviewer in the reviewer list view, the list is also filtered by the days to show in reviews list setting.",
                        null=True,
                    ),
                ),
                (
                    "days_to_show_in_reviewer_list",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum number of days to show in reviewer list for completed items.",
                        null=True,
                    ),
                ),
                (
                    "person",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="person.Person"
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group.Group",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "review secretary settings",
            },
        ),
        migrations.CreateModel(
            name="ReviewRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time", models.DateTimeField(default=django.utils.timezone.now)),
                ("deadline", models.DateField()),
                (
                    "requested_rev",
                    models.CharField(
                        blank=True,
                        help_text="Fill in if a specific revision is to be reviewed, e.g. 02",
                        max_length=16,
                        verbose_name="requested revision",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Provide any additional information to show to the review team secretary and reviewer",
                        max_length=2048,
                        verbose_name="Requester's comments and instructions",
                    ),
                ),
                (
                    "doc",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviewrequest_set",
                        to="doc.Document",
                    ),
                ),
                (
                    "requested_by",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="person.Person"
                    ),
                ),
                (
                    "state",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="name.ReviewRequestStateName",
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group.Group",
                    ),
                ),
                (
                    "type",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="name.ReviewTypeName",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewerSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "min_interval",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (7, "Once per week"),
                            (14, "Once per fortnight"),
                            (30, "Once per month"),
                            (61, "Once per two months"),
                            (91, "Once per quarter"),
                        ],
                        null=True,
                        verbose_name="Can review at most",
                    ),
                ),
                (
                    "filter_re",
                    models.CharField(
                        blank=True,
                        help_text="Internet-Draft names matching this regular expression should not be assigned",
                        max_length=255,
                        validators=[ietf.utils.validators.RegexStringValidator()],
                        verbose_name="Filter regexp",
                    ),
                ),
                (
                    "skip_next",
                    models.IntegerField(
                        default=0, verbose_name="Skip next assignments"
                    ),
                ),
                (
                    "remind_days_before_deadline",
                    models.IntegerField(
                        blank=True,
                        help_text="To get an email reminder in case you forget to do an assigned review, enter the number of days before review deadline you want to receive it. Clear the field if you don't want this reminder.",
                        null=True,
                    ),
                ),
                (
                    "remind_days_open_reviews",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="To get a periodic email reminder of all your open reviews, enter the number of days between these reminders. Clear the field if you don't want these reminders.",
                        null=True,
                        verbose_name="Periodic reminder of open reviews every X days",
                    ),
                ),
                (
                    "request_assignment_next",
                    models.BooleanField(
                        default=False,
                        help_text="If you would like to be assigned to a review as soon as possible, select this option. It is automatically reset once you receive any assignment.",
                        verbose_name="Select me next for an assignment",
                    ),
                ),
                (
                    "expertise",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Describe the reviewer's expertise in this team's area",
                        max_length=2048,
                        verbose_name="Reviewer's expertise in this team's area",
                    ),
                ),
                (
                    "person",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="person.Person"
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group.Group",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "reviewer settings",
            },
        ),
        migrations.CreateModel(
            name="ReviewAssignment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_on", models.DateTimeField(blank=True, null=True)),
                ("completed_on", models.DateTimeField(blank=True, null=True)),
                (
                    "reviewed_rev",
                    models.CharField(
                        blank=True, max_length=16, verbose_name="reviewed revision"
                    ),
                ),
                ("mailarch_url", models.URLField(blank=True, null=True)),
                (
                    "result",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="name.ReviewResultName",
                    ),
                ),
                (
                    "review",
                    ietf.utils.models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="doc.Document",
                    ),
                ),
                (
                    "review_request",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="review.ReviewRequest",
                    ),
                ),
                (
                    "reviewer",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="person.Email"
                    ),
                ),
                (
                    "state",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="name.ReviewAssignmentStateName",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NextReviewerInTeam",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "next_reviewer",
                    ietf.utils.models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="person.Person"
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group.Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "next reviewer in team setting",
                "verbose_name_plural": "next reviewer in team settings",
            },
        ),
        migrations.CreateModel(
            name="HistoricalUnavailablePeriod",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("history_change_reason", models.TextField(null=True)),
                (
                    "start_date",
                    models.DateField(
                        default=ietf.utils.timezone.date_today,
                        help_text="Choose the start date so that you can still do a review if it's assigned just before the start date - this usually means you should mark yourself unavailable for assignment some time before you are actually away. The default is today.",
                        null=True,
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Leaving the end date blank means that the period continues indefinitely. You can end it later.",
                        null=True,
                    ),
                ),
                (
                    "availability",
                    models.CharField(
                        choices=[
                            ("canfinish", "Can do follow-ups"),
                            ("unavailable", "Completely unavailable"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Provide (for the secretary's benefit) the reason why the review is unavailable",
                        max_length=2048,
                        verbose_name="Reason why reviewer is unavailable (Optional)",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="person.Person",
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="group.Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical unavailable period",
                "verbose_name_plural": "historical unavailable periods",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalReviewRequest",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("history_change_reason", models.TextField(null=True)),
                ("time", models.DateTimeField(default=django.utils.timezone.now)),
                ("deadline", models.DateField()),
                (
                    "requested_rev",
                    models.CharField(
                        blank=True,
                        help_text="Fill in if a specific revision is to be reviewed, e.g. 02",
                        max_length=16,
                        verbose_name="requested revision",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Provide any additional information to show to the review team secretary and reviewer",
                        max_length=2048,
                        verbose_name="Requester's comments and instructions",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "doc",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="doc.Document",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requested_by",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="person.Person",
                    ),
                ),
                (
                    "state",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="name.ReviewRequestStateName",
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="group.Group",
                    ),
                ),
                (
                    "type",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="name.ReviewTypeName",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical review request",
                "verbose_name_plural": "historical review requests",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalReviewerSettings",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("history_change_reason", models.TextField(null=True)),
                (
                    "min_interval",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (7, "Once per week"),
                            (14, "Once per fortnight"),
                            (30, "Once per month"),
                            (61, "Once per two months"),
                            (91, "Once per quarter"),
                        ],
                        null=True,
                        verbose_name="Can review at most",
                    ),
                ),
                (
                    "filter_re",
                    models.CharField(
                        blank=True,
                        help_text="Internet-Draft names matching this regular expression should not be assigned",
                        max_length=255,
                        validators=[ietf.utils.validators.RegexStringValidator()],
                        verbose_name="Filter regexp",
                    ),
                ),
                (
                    "skip_next",
                    models.IntegerField(
                        default=0, verbose_name="Skip next assignments"
                    ),
                ),
                (
                    "remind_days_before_deadline",
                    models.IntegerField(
                        blank=True,
                        help_text="To get an email reminder in case you forget to do an assigned review, enter the number of days before review deadline you want to receive it. Clear the field if you don't want this reminder.",
                        null=True,
                    ),
                ),
                (
                    "remind_days_open_reviews",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="To get a periodic email reminder of all your open reviews, enter the number of days between these reminders. Clear the field if you don't want these reminders.",
                        null=True,
                        verbose_name="Periodic reminder of open reviews every X days",
                    ),
                ),
                (
                    "request_assignment_next",
                    models.BooleanField(
                        default=False,
                        help_text="If you would like to be assigned to a review as soon as possible, select this option. It is automatically reset once you receive any assignment.",
                        verbose_name="Select me next for an assignment",
                    ),
                ),
                (
                    "expertise",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Describe the reviewer's expertise in this team's area",
                        max_length=2048,
                        verbose_name="Reviewer's expertise in this team's area",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="person.Person",
                    ),
                ),
                (
                    "team",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(
                            _negated=True, reviewteamsettings=None
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="group.Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical reviewer settings",
                "verbose_name_plural": "historical reviewer settings",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalReviewAssignment",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("history_change_reason", models.TextField(null=True)),
                ("assigned_on", models.DateTimeField(blank=True, null=True)),
                ("completed_on", models.DateTimeField(blank=True, null=True)),
                (
                    "reviewed_rev",
                    models.CharField(
                        blank=True, max_length=16, verbose_name="reviewed revision"
                    ),
                ),
                ("mailarch_url", models.URLField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "result",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="name.ReviewResultName",
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="doc.Document",
                    ),
                ),
                (
                    "review_request",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="review.ReviewRequest",
                    ),
                ),
                (
                    "reviewer",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="person.Email",
                    ),
                ),
                (
                    "state",
                    ietf.utils.models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="name.ReviewAssignmentStateName",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical review assignment",
                "verbose_name_plural": "historical review assignments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddConstraint(
            model_name="reviewersettings",
            constraint=models.UniqueConstraint(
                fields=("team", "person"),
                name="unique_reviewer_settings_per_team_person",
            ),
        ),
    ]
